# Author: SilentNightSound#7430
# Combines vertex groups with the same prefix into one, a fast alternative to the Vertex Weight Mix that works for multiple groups
# You will likely want to use blender_fill_vg_gaps.txt after this to fill in any gaps caused by merging groups together

import bpy
import itertools
class Fatal(Exception): pass
selected_obj = [obj for obj in bpy.context.selected_objects]
vgroup_names = []


##### USAGE INSTRUCTIONS

# MODE 1: Runs the merge on a specific list of vertex groups in the selected object(s). Can add more names or fewer to the list - change the names to what you need
# MODE 2: Runs the merge on a range of vertex groups in the selected object(s). Replace smallest_group_number with the lower bound, and largest_group_number with the upper bound
# MODE 3 (DEFAULT): Runs the merge on ALL vertex groups in the selected object(s)

# Select the mode you want to run:
mode = 3

# Required data for MODE 1:
vertex_groups = ["replace_with_first_vertex_group_name", "second_vertex_group_name", "third_name_etc"]

# Required data for MODE 2:
smallest_group_number = 000
largest_group_number = 999

######


if mode == 1:
    vgroup_names = [vertex_groups]
elif mode == 2:
    vgroup_names = [[f"{i}" for i in range(smallest_group_number, largest_group_number+1)]]
elif mode == 3:
    vgroup_names = [[x.name.split(".")[0] for x in y.vertex_groups] for y in selected_obj]
else:
    raise Fatal("Mode not recognized, exiting")

if not vgroup_names:
    raise Fatal("No vertex groups found, please double check an object is selected and required data has been entered")

for cur_obj, cur_vgroup in zip(selected_obj, itertools.cycle(vgroup_names)):
    for vname in cur_vgroup:
        relevant = [x.name for x in cur_obj.vertex_groups if x.name.split(".")[0] == f"{vname}"]

        if relevant:

            vgroup = cur_obj.vertex_groups.new(name=f"x{vname}")
                
            for vert_id, vert in enumerate(cur_obj.data.vertices):
                available_groups = [v_group_elem.group for v_group_elem in vert.groups]
                
                combined = 0
                for v in relevant:
                    if cur_obj.vertex_groups[v].index in available_groups:
                        combined += cur_obj.vertex_groups[v].weight(vert_id)

                if combined > 0:
                    vgroup.add([vert_id], combined ,'ADD')
                    
            for vg in [x for x in cur_obj.vertex_groups if x.name.split(".")[0] == f"{vname}"]:
                cur_obj.vertex_groups.remove(vg)

            for vg in cur_obj.vertex_groups:
                if vg.name[0].lower() == "x":
                    vg.name = vg.name[1:]
                    
    bpy.context.view_layer.objects.active = cur_obj
    bpy.ops.object.vertex_group_sort()
